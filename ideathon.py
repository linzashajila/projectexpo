# -*- coding: utf-8 -*-
"""Ideathon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qMizuUrUEAcIkyOwdRE8dl9ObUPTjPcu
"""

import pandas as pd
from google.colab import files

climate_data = pd.read_csv('climate_data.csv')
province_detail = pd.read_csv('province_detail.csv')
station_detail = pd.read_csv('station_detail.csv')

climate_station_merged = pd.merge(climate_data, station_detail, on='station_id', how='left')

final_dataset = pd.merge(climate_station_merged, province_detail, on='province_id', how='left')

final_dataset.to_csv('combined_agriculture_dataset.csv', index=False)

print("Datasets combined and saved successfully!")

files.download('combined_agriculture_dataset.csv')

import pandas as pd
agr_df = pd.read_csv('combined_agriculture_dataset.csv')
agr_df.head()

!pip install pandas scikit-learn shap streamlit pyngrok

!pip install shap --upgrade

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import shap

data = pd.read_csv("combined_agriculture_dataset.csv")

features = ['Tn', 'Tx', 'RH_avg', 'RR']
target = 'Tavg'

print("Missing values in features:")
print(data[features].isnull().sum())

print("\nMissing values in target:")
print(data[target].isnull().sum())

data = data.dropna(subset=[target])

print("\nAfter dropping NaN in target:")
print(data[target].isnull().sum())

X = data[features]
y = data[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)

print(f"AI Model Mean Squared Error: {mse:.2f}")

for i in range(5):
    print(f"Actual: {y_test.iloc[i]}, AI Predicted: {y_pred[i]}")

feedback = input("Was the AI's prediction correct for the first prediction? (Yes/No): ")

if feedback.lower() == 'no':
    correct_value = float(input("Enter the correct value for the target variable: "))

    new_data = X_test.iloc[[0]]
    X_train = pd.concat([X_train, new_data], ignore_index=True)
    y_train = pd.concat([y_train, pd.Series(correct_value)], ignore_index=True)
    model.fit(X_train, y_train)
    print("AI model retrained with the new data!")

explainer = shap.Explainer(model, X_train)
shap_values = explainer(X_test)

shap.initjs()
shap.force_plot(explainer.expected_value, shap_values[0], X_test.iloc[0], matplotlib=True)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile ai_human_collab.py
# import streamlit as st
# import pandas as pd
# from sklearn.model_selection import train_test_split
# from sklearn.ensemble import RandomForestRegressor
# from sklearn.metrics import mean_squared_error
# import shap
# 
# data = pd.read_csv('combined_agriculture_dataset.csv')
# 
# features = ['Tn', 'Tx', 'Tavg', 'RH_avg', 'RR', 'ws', 'lat', 'lon', 'elev']
# target = 'crop_yield'
# 
# X = data[features]
# y = data[target]
# 
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# 
# model = RandomForestRegressor()
# model.fit(X_train, y_train)
# 
# y_pred = model.predict(X_test)
# mse = mean_squared_error(y_test, y_pred)
# 
# st.title("AI-Human Collaboration for Agriculture")
# st.write(f"AI Model Mean Squared Error: {mse:.2f}")
# 
# for i in range(5):
#     st.write(f"Actual: {y_test.iloc[i]}, AI Predicted: {y_pred[i]}")
# 
# feedback = st.radio("Was the prediction correct?", ('Yes', 'No'))
# 
# if feedback == 'No':
#     correct_value = st.number_input("Enter the correct value for the crop yield:", min_value=0.0)
#     X_train = X_train.append(X_test.iloc[0])
#     y_train = y_train.append(pd.Series(correct_value))
#     model.fit(X_train, y_train)
#     st.write("AI model retrained with the new data!")
# 
# explainer = shap.Explainer(model, X_train)
# shap_values = explainer(X_test)
# st.write("Explanation for AI Prediction:")
# shap.force_plot(explainer.expected_value, shap_values[0], X_test.iloc[0], matplotlib=True)

!pip install pyngrok streamlit
!rm -f /root/.config/ngrok/ngrok.yml

import time
from pyngrok import ngrok

!streamlit run ai_human_collab.py &

time.sleep(5)

public_url = ngrok.connect(8501)
print(f"Streamlit app is running on: {public_url}")

ngrok.set_auth_token('2nZlWI51jIh43Xx3zYqKOL3QkwY_7qqyYnfD59vsdUVyqwskH')